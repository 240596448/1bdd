#Использовать logos

Перем Лог;

Перем БДД;
Перем ФайлФичи;

Функция ПолучитьСписокШагов(КонтекстФреймворкаBDD) Экспорт
	БДД = КонтекстФреймворкаBDD;

	ВсеТесты = Новый Массив;

	ВсеТесты.Добавить("ЯПодготовилСпециальнуюТестовуюФичу");
	ВсеТесты.Добавить("ЯЗапустилГенерациюШаговФичи");
	ВсеТесты.Добавить("ЯПолучилСгенерированныйOs_ФайлВОжидаемомКаталоге");
	ВсеТесты.Добавить("СгенерированныйOs_ФайлПрошелПроверкуНаКорректность");

	Возврат ВсеТесты;
КонецФункции

//я подготовил специальную тестовую фичу "ПередачаПараметров"
//##ЯПодготовилСпециальнуюТестовуюФичу
Процедура ЯПодготовилСпециальнуюТестовуюФичу(ИмяФичи) Экспорт
	Лог = Логирование.ПолучитьЛог("oscript.app.bdd.ПроверкаГенерации.feature");
	//Лог.УстановитьУровень(УровниЛога.Отладка);

	ФайлФичи = ПолучитьФайлФичи(ИмяФичи);
	Лог.Отладка("Подготовлена тестовая фича "+ФайлФичи.ПолноеИмя);
КонецПроцедуры

//я запустил генерацию шагов фичи "ПередачаПараметров"
//##ЯЗапустилГенерациюШаговФичи
Процедура ЯЗапустилГенерациюШаговФичи(ИмяФичи) Экспорт
	ПутьИсполнителяБДД = ОбъединитьПути(ПолучитьКаталогИсходников(), "bdd.os");
	ФайлИсполнителя = Новый Файл(ПутьИсполнителяБДД);
	Ожидаем.Что(ФайлИсполнителя.Существует(), "Ожидаем, что скрипт исполнителя шагов существует, а его нет. "+ФайлИсполнителя.ПолноеИмя).Равно(Истина);

	УстановитьТекущийКаталог(ФайлФичи.Путь);
	Лог.Отладка("ТекущийКаталог "+ТекущийКаталог());

	ИмяЛогаКоманды = ОбъединитьПути(ФайлФичи.Путь, "gen-log.txt");
	СтрокаКоманды = СтрШаблон("cmd /c oscript.exe %4 %1 generate %2 -debug on %3", ПутьИсполнителяБДД, ФайлФичи.Имя,
		СуффиксПеренаправленияВывода(ИмяЛогаКоманды, Ложь), "-encoding=utf-8");
	Лог.Отладка("СтрокаКоманды "+СтрокаКоманды);

	КодВозврата = Неопределено;
	ЗапуститьПриложение(СтрокаКоманды, ФайлФичи.Путь, Истина, КодВозврата);

	ВывестиТекстФайла(ИмяЛогаКоманды);

	Ожидаем.Что(КодВозврата, "Ожидаем, что код возврата равен 0, а это не так").Равно(0);
КонецПроцедуры

//я получил сгенерированный os-файл в ожидаемом каталоге
//##ЯПолучилСгенерированныйOs_ФайлВОжидаемомКаталоге
Процедура ЯПолучилСгенерированныйOs_ФайлВОжидаемомКаталоге() Экспорт
	 ФайлШагов = Новый Файл(ОбъединитьПути(ФайлФичи.Путь, "step_definitions", ФайлФичи.ИмяБезРасширения+".os"));
	 Ожидаем.Что(ФайлШагов.Существует(), "Ожидаем, что файл исполнителя шагов существует, а его нет. "+ФайлШагов.ПолноеИмя).Равно(Истина);
КонецПроцедуры

//сгенерированный os-файл прошел проверку на корректность
//##СгенерированныйOs_ФайлПрошелПроверкуНаКорректность
Процедура СгенерированныйOs_ФайлПрошелПроверкуНаКорректность() Экспорт
	Контекст = Новый Структура("Контекст", Новый Структура("Журнал", Новый Структура));
	ИсполнительБДД = ЗагрузитьСценарий(ОбъединитьПути(ПолучитьКаталогИсходников(), "bdd-exec.os"), Контекст);

	СтатусВыполненияНеРеализован = ИсполнительБДД.ВозможныеСтатусыВыполнения().НеРеализован;

	РезультатыВыполнения = ИсполнительБДД.ВыполнитьФичу(ФайлФичи);

	Ожидаем.Что(РезультатыВыполнения, "Ожидали, что дерево фич будет получено как дерево значений, а это не так").ИмеетТип("ДеревоЗначений");

	Функциональность0 = РезультатыВыполнения.Строки[0];
	Ожидаем.Что(Функциональность0.СтатусВыполнения, "Ожидали, что статус выполнения Функциональность0 будет Не реализован, а это не так").Равно(СтатусВыполненияНеРеализован);

КонецПроцедуры

Функция ПолучитьФайлФичи(ИмяФичи)
	ФайлФичи = Новый Файл(ОбъединитьПути(ТекущийСценарий().Каталог, "..", ИмяФичи+".feature"));
	ВременныйКаталогФичи = ПодготовитьТестовыйКаталогСФичей(ФайлФичи);

	ФайлФичи = Новый Файл(ОбъединитьПути(ВременныйКаталогФичи.ПолноеИмя, ИмяФичи+".feature"));
	Возврат ФайлФичи;
КонецФункции

// TODO дубль метода с несколькими тестовыми файлами
Функция ПодготовитьТестовыйКаталогСФичей(ФайлФичи)
	КаталогФичи = ВременныеФайлы.СоздатьКаталог();
	Лог.Отладка("Использую временный каталог "+КаталогФичи);
	КопироватьФайл(ФайлФичи.ПолноеИмя, ОбъединитьПути(КаталогФичи, ФайлФичи.Имя ));

	ИмяИсполнителяШагов = ФайлФичи.ИмяБезРасширения+ ".os";
	КаталогИсполнителяШагов = ОбъединитьПути(КаталогФичи, "step_definitions" );
	СоздатьКаталог(КаталогИсполнителяШагов);

	ФайлИсполнителяШагов = Новый Файл(ОбъединитьПути(КаталогИсполнителяШагов, ИмяИсполнителяШагов ));

	Ожидаем.Что(ФайлИсполнителяШагов.Существует(), "Ожидаем, что файл исполнителя шагов не существует, а он есть").Равно(Ложь);
	Возврат Новый Файл(КаталогФичи);
КонецФункции

Процедура ВывестиТекстФайла(Знач ИмяФайла, Знач Кодировка = Неопределено)

	Файл = Новый Файл(ИмяФайла);
	Если НЕ Файл.Существует() Тогда
		Лог.Отладка("Не существует лог-файл <"+ИмяФайла+">");
		Возврат;
	КонецЕсли;

	Если Кодировка = Неопределено Тогда
		Кодировка = "utf-8";
	КонецЕсли;

	ЧТ = Новый ЧтениеТекста(ИмяФайла, Кодировка);
	СтрокаФайла = ЧТ.Прочитать();
	ЧТ.Закрыть();

	Лог.Отладка("");
	Лог.Отладка("  ----------------    ----------------    ----------------  ");
	Лог.Отладка(СтрокаФайла);
	Лог.Отладка("  ----------------    ----------------    ----------------  ");
	Лог.Отладка("");

КонецПроцедуры

Функция СуффиксПеренаправленияВывода(Знач ИмяФайлаПриемника, Знач УчитыватьStdErr = Истина)
	Возврат "> """ + ИмяФайлаПриемника + """" + ?(УчитыватьStdErr, " 2>&1", "");
КонецФункции

Функция ПолучитьКаталогИсходников()
	КаталогПроекта = ОбъединитьПути(ТекущийСценарий().Каталог, "..", "..", "..");
	Возврат ОбъединитьПути(КаталогПроекта, "src");
КонецФункции // ПолучитьКаталогИсходников()
