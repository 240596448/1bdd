//----------------------------------------------------------
//This Source Code Form is subject to the terms of the
//Mozilla Public License, v.2.0. If a copy of the MPL
//was not distributed with this file, You can obtain one
//at http://mozilla.org/MPL/2.0/.
//----------------------------------------------------------

////////////////////////////////////////////////////////////////////////////////////////////////
//
// Тест для генератора BDD-шагов сценария в формате OneScript на базе файлов Gherkin
//
/////////////////////////////////////////////////////////////////////////////////////////////////

#Использовать logos
#Использовать asserts

#Использовать ".."

Перем юТест;
Перем Лог;

Перем ОписаниеОшибкиВК;

Функция ПолучитьСписокТестов(Знач ЮнитТестирование) Экспорт

	юТест = ЮнитТестирование;

	МассивТестов = Новый Массив;
	МассивТестов.Добавить("Тест_ДолженПодключитьВКГеркин");
	МассивТестов.Добавить("ТестДолжен_ПрочитатьФайлФичи");

	Возврат МассивТестов;

КонецФункции

Процедура ПослеЗапускаТеста() Экспорт
	// ВключитьОтладкуЧитателя(УровниЛога.Информация);
КонецПроцедуры

Процедура Тест_ДолженПодключитьВКГеркин() Экспорт
	
	ИдентификаторКомпоненты = "Gherkin";
	// ИдентификаторКомпоненты = "_" + СтрЗаменить(Новый УникальныйИдентификатор, "-", "");
	ИмяВнешнейКомпоненты = "AddIn." + ИдентификаторКомпоненты + ".GherkinParser";

	ВнешняяКомпонента = ПодключитьВК(ИдентификаторКомпоненты);
	Ожидаем.Что(ВнешняяКомпонента.Версия, "ВнешняяКомпонента.Версия").Заполнено();

	Ожидаем.Что(Строка(ТипЗнч(ВнешняяКомпонента)))
		.Равно(Строка(Тип(ИмяВнешнейКомпоненты)));

КонецПроцедуры

Процедура ТестДолжен_ПрочитатьФайлФичи() Экспорт
	
	ВнешняяКомпонента = ПодключитьВК();

	ЧтениеТекста = Новый ЧтениеТекста(ПутьФайлаКлючевыхСлов(), "UTF-8");
	КлючевыеСлова = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();

	ВнешняяКомпонента.КлючевыеСлова = КлючевыеСлова;
	
	ФайлФичи = ПолучитьФайлФичи("БезПараметров");
	ИмяФайла = ФайлФичи.ПолноеИмя;

	СтрокаРазбора = ВнешняяКомпонента.ПрочитатьФайл(ИмяФайла);
	Сообщить(СтрокаРазбора);

	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(СтрокаРазбора);
	РезультатРазбора = ПрочитатьJSON(ЧтениеJSON, Ложь);

	Ожидаем.Что(РезультатРазбора, "РезультатРазбора").ИмеетТип("Структура");
КонецПроцедуры

Функция ПолучитьФайлФичи(ИмяФичи)
	ПутьФичи = ОбъединитьПути(ПолучитьПутьТестовыхФич(), ИмяФичи + ".feature");
	Возврат Новый Файл(ПутьФичи);
КонецФункции

Функция ПолучитьПутьТестовыхФич()
	Возврат ОбъединитьПути(ТекущийСценарий().Каталог, "..", "tests", "fixtures");
КонецФункции

Функция ПутьКаталогаКомпоненты()

	Возврат ОбъединитьПути(ТекущийКаталог(), "vendor", "Gherkin1C");
	
КонецФункции

Функция ПутьФайлаКомпоненты64()
	Результат = ОбъединитьПути(ПутьКаталогаКомпоненты(), "AddIn.zip");
	// Результат = ОбъединитьПути(ТекущийКаталог(), "vendor", "Gherkin1C", "AddIn");
	// Результат = ОбъединитьПути(Результат, "Gherkin1CWin64_0-0-0-206.dll");
	
	Возврат Результат;
	
КонецФункции

Функция ПутьФайлаКомпоненты32()
	Результат = ОбъединитьПути(ПутьКаталогаКомпоненты(), "AddIn");
	Результат = ОбъединитьПути(Результат, "Gherkin1CWin32_0-0-0-206.dll");
	
	Возврат Результат;
	
КонецФункции

Функция ПутьФайлаКлючевыхСлов()
	
	Возврат ОбъединитьПути(ПутьКаталогаКомпоненты(), "keywords.json");
	
КонецФункции

Функция ПодключитьВК(Знач ИдентификаторКомпоненты = "")

	Если Не ЗначениеЗаполнено(ИдентификаторКомпоненты) Тогда
		ИдентификаторКомпоненты = "Gherkin";
		// ИдентификаторКомпоненты = "_" + СтрЗаменить(Новый УникальныйИдентификатор, "-", "");
	КонецЕсли;

	ВнешняяКомпонента = ПодключитьКомпонентуПоПути(ПутьФайлаКомпоненты64(), ИдентификаторКомпоненты);
	Если ВнешняяКомпонента = Неопределено Тогда
		ВнешняяКомпонента = ПодключитьКомпонентуПоПути(ПутьФайлаКомпоненты32(), ИдентификаторКомпоненты);
	КонецЕсли;
	Если ВнешняяКомпонента = Неопределено Тогда
		ВызватьИсключение "Не удалось подключить компоненту
			|" + ОписаниеОшибкиВК;
	КонецЕсли;
	
	Возврат ВнешняяКомпонента;

КонецФункции

Функция ПодключитьКомпонентуПоПути(Знач ПутьФайла, Знач ИдентификаторКомпоненты)

	Файл = Новый Файл(ПутьФайла);
	Ожидаем.Что(Файл.Существует(), "Файл.Существует()").ЭтоИстина();
	
	ПодключитьВнешнююКомпоненту(ПутьФайла, ИдентификаторКомпоненты, ТипВнешнейКомпоненты.Native);

	Попытка
		ВнешняяКомпонента = Новый(СтрШаблон("AddIn.%1.GherkinParser", ИдентификаторКомпоненты));
	Исключение
		ИнфоОшибки = ИнформацияОбОшибке();
		ОписаниеОшибкиВК = ПодробноеПредставлениеОшибки(ИнфоОшибки);

		Возврат Неопределено;
	КонецПопытки;

	Возврат ВнешняяКомпонента;

КонецФункции

////////////////////////////////////////////////////////////////////
// Программный интерфейс

Процедура Инициализация()
	Лог = Логирование.ПолучитьЛог("bdd-tests");
	// Лог.УстановитьУровень(УровниЛога.Отладка);
	Лог.УстановитьУровень(УровниЛога.Информация);

КонецПроцедуры

///////////////////////////////////////////////////////////////////
// Точка входа

Инициализация();
