
/////////////////////////////////////////////////////////////////////////////////////////////////
//
// Тест для генератора BDD-шагов сценария в формате OneScript на базе файлов Gherkin
//
/////////////////////////////////////////////////////////////////////////////////////////////////

#Использовать logos
#Использовать asserts
#Использовать tempfiles

Перем юТест;
Перем Лог;
Перем ЧитательГеркин;
Перем ИсполнительБДД;

Перем Контекст;

Функция ПолучитьСписокТестов(Знач ЮнитТестирование) Экспорт

	юТест = ЮнитТестирование;
		
	МассивТестов = Новый Массив;
	МассивТестов.Добавить("Тест_ВыполнитьФичуСПодготовленнымИсполнителемШагов");
	МассивТестов.Добавить("Тест_ВыполнитьФичуСоСтроковымиПараметрамиСПодготовленнымИсполнителемШагов");
	
	Возврат МассивТестов;

КонецФункции

Процедура ПослеЗапускаТеста() Экспорт
	ВременныеФайлы.Удалить();
КонецПроцедуры

Процедура Тест_ВыполнитьФичуСПодготовленнымИсполнителемШагов() Экспорт
	// ВключитьОтладкуИсполнителя(УровниЛога.Отладка);
	ИмяФичи = "НичегоНеДелаю";
	ФайлФичи = ПолучитьФайлФичи(ИмяФичи);

	ВозможныеСтатусыВыполнения = ИсполнительБДД.ВозможныеСтатусыВыполнения();	
	
	РезультатыВыполнения = ИсполнительБДД.ВыполнитьФичу(ФайлФичи);

	Ожидаем.Что(РезультатыВыполнения, "Ожидали, что дерево фич будет получено как дерево значений, а это не так").ИмеетТип("ДеревоЗначений");

	Журнал = Контекст.Контекст.Журнал[ИмяФичи];
	Ожидаем.Что(Журнал, "Ожидали, что журнал выполнения будет правильным, а это не так").Равно("ЯНичегоНеДелаю;НичегоНеПроисходит;");
	
	Функциональность0 = РезультатыВыполнения.Строки[0];
	Ожидаем.Что(Функциональность0.СтатусВыполнения, "Ожидали, что статус выполнения Функциональность0 будет пройден, а это не так").Равно(ВозможныеСтатусыВыполнения.Пройден);
		
	Сценарии = Функциональность0.Строки;
	Ожидаем.Что(Сценарии, "Ожидали, что найдем правильное число сценариев").ИмеетДлину(1);
	
	Сценарий0 = Сценарии[0];
	Ожидаем.Что(Функциональность0.СтатусВыполнения, "Ожидали, что статус выполнения Сценарий0 будет пройден, а это не так").Равно(ВозможныеСтатусыВыполнения.Пройден);
	Ожидаем.Что(Сценарий0.Тело, "Ожидали, что найдем правильное тело сценария 0, а это не так").Равно("Ничего не делаем");

	Шаги = Сценарий0.Строки;
	Ожидаем.Что(Шаги, "Ожидали, что найдем правильное число шагов").ИмеетДлину(2);

	Шаг0 = Шаги[0];
	Ожидаем.Что(Шаг0.СтатусВыполнения, "Ожидали, что статус выполнения Шаг0 будет пройден, а это не так").Равно(ВозможныеСтатусыВыполнения.Пройден);
	Ожидаем.Что(Шаг0.Тело, "Ожидали, что найдем правильное тело шага 0, а это не так").Равно("я ничего не делаю");

	Шаг1 = Шаги[1];
	Ожидаем.Что(Шаг1.СтатусВыполнения, "Ожидали, что статус выполнения Шаг1 будет пройден, а это не так").Равно(ВозможныеСтатусыВыполнения.Пройден);
	Ожидаем.Что(Шаг1.Тело, "Ожидали, что найдем правильное тело шага 1, а это не так").Равно("ничего не происходит");
КонецПроцедуры

Процедура Тест_ВыполнитьФичуСоСтроковымиПараметрамиСПодготовленнымИсполнителемШагов() Экспорт
	// ВключитьОтладкуИсполнителя(УровниЛога.Отладка);
	ИмяФичи = "СтроковыеПараметры";
	ФайлФичи = ПолучитьФайлФичи(ИмяФичи);

	ВозможныеСтатусыВыполнения = ИсполнительБДД.ВозможныеСтатусыВыполнения();	
	
	РезультатыВыполнения = ИсполнительБДД.ВыполнитьФичу(ФайлФичи);

	Ожидаем.Что(РезультатыВыполнения, "Ожидали, что дерево фич будет получено как дерево значений, а это не так").ИмеетТип("ДеревоЗначений");

	Журнал = Контекст.Контекст.Журнал[ИмяФичи];
	Ожидаем.Что(Журнал, "Ожидали, что журнал выполнения будет правильным, а это не так").Равно("ЯНичегоНеДелаю;НичегоНеПроисходит;");
	
	Функциональность0 = РезультатыВыполнения.Строки[0];
	Ожидаем.Что(Функциональность0.СтатусВыполнения, "Ожидали, что статус выполнения Функциональность0 будет пройден, а это не так").Равно(ВозможныеСтатусыВыполнения.Пройден);
		
	Сценарии = Функциональность0.Строки;
	Ожидаем.Что(Сценарии, "Ожидали, что найдем правильное число сценариев").ИмеетДлину(1);
	
	Сценарий0 = Сценарии[0];
	Ожидаем.Что(Функциональность0.СтатусВыполнения, "Ожидали, что статус выполнения Сценарий0 будет пройден, а это не так").Равно(ВозможныеСтатусыВыполнения.Пройден);
	Ожидаем.Что(Сценарий0.Тело, "Ожидали, что найдем правильное тело сценария 0, а это не так").Равно("Ничего не делаем");

	Шаги = Сценарий0.Строки;
	Ожидаем.Что(Шаги, "Ожидали, что найдем правильное число шагов").ИмеетДлину(2);

	Шаг0 = Шаги[0];
	Ожидаем.Что(Шаг0.СтатусВыполнения, "Ожидали, что статус выполнения Шаг0 будет пройден, а это не так").Равно(ВозможныеСтатусыВыполнения.Пройден);
	Ожидаем.Что(Шаг0.Тело, "Ожидали, что найдем правильное тело шага 0, а это не так").Равно("я ничего не делаю ""ПарамСтрока""");

	Шаг1 = Шаги[1];
	Ожидаем.Что(Шаг1.СтатусВыполнения, "Ожидали, что статус выполнения Шаг1 будет пройден, а это не так").Равно(ВозможныеСтатусыВыполнения.Пройден);
	Ожидаем.Что(Шаг1.Тело, "Ожидали, что найдем правильное тело шага 1, а это не так").Равно("ничего не происходит 'ДругойПарамСтрока'");
КонецПроцедуры

Функция ПолучитьФайлФичи(ИмяФичи)
	ФайлФичи = Новый Файл(ОбъединитьПути(ТекущийСценарий().Каталог, "fixtures\"+ИмяФичи+".feature"));
	ВременныйКаталогФичи = ПодготовитьТестовыйКаталогСФичей(ФайлФичи);

	ФайлФичи = Новый Файл(ОбъединитьПути(ВременныйКаталогФичи.ПолноеИмя, ИмяФичи+".feature"));
	Возврат ФайлФичи;
КонецФункции

Функция ПодготовитьТестовыйКаталогСФичей(ФайлФичи)
	КаталогФичи = ВременныеФайлы.СоздатьКаталог();
	Лог.Отладка("Использую временный каталог "+КаталогФичи);
	КопироватьФайл(ФайлФичи.ПолноеИмя, ОбъединитьПути(КаталогФичи, ФайлФичи.Имя ));
	
	ИмяИсполнителяШагов = ФайлФичи.ИмяБезРасширения+ ".os";
	КаталогИсполнителяШагов = ОбъединитьПути(КаталогФичи, "step_definitions" );
	СоздатьКаталог(КаталогИсполнителяШагов);
	
	ФайлИсполнителяШагов = Новый Файл(ОбъединитьПути(КаталогИсполнителяШагов, ИмяИсполнителяШагов ));
	КопироватьФайл(ОбъединитьПути(ФайлФичи.Путь, "step_definitions-example", ИмяИсполнителяШагов), ФайлИсполнителяШагов.ПолноеИмя);
	
	Ожидаем.Что(ФайлИсполнителяШагов.Существует(), "Ожидаем, что файл исполнителя шагов существует, а его нет").Равно(Истина);
	Возврат Новый Файл(КаталогФичи);
КонецФункции

Процедура ВключитьОтладкуИсполнителя(НовыйУровеньЛога)
	ДопЛог = Логирование.ПолучитьЛог(ИсполнительБДД.ИмяЛога());
	ДопЛог.УстановитьУровень(НовыйУровеньЛога);
КонецПроцедуры

////////////////////////////////////////////////////////////////////
// Программный интерфейс

Функция Инициализация() 
	Лог = Логирование.ПолучитьЛог("oscript.app.bdd-tests");
	// Лог.УстановитьУровень(УровниЛога.Отладка);

	Контекст = Новый Структура("Контекст", Новый Структура("Журнал", Новый Структура));

	ИсполнительБДД = ЗагрузитьСценарий(ОбъединитьПути(ТекущийСценарий().Каталог, "../src/bdd-exec.os"), Контекст);

	ЧитательГеркин = ЗагрузитьСценарий(ОбъединитьПути(ТекущийСценарий().Каталог, "../src/gherkin-read.os"), Контекст);

КонецФункции

///////////////////////////////////////////////////////////////////
// Точка входа

Инициализация();
