////////////////////////////////////////////////////////////////////
//
// Объект-помощник для генерации файла шагов для Gherkin-спецификаций
//
//////////////////////////////////////////////////////////////////

#Использовать logos
#Использовать asserts
// #Использовать strings

Перем Лог;
Перем ЧитательГеркин;

Перем ВозможныеТипыШагов;
Перем ВозможныеКлючиПараметров;
Перем ПредставленияТиповПараметров;

////////////////////////////////////////////////////////////////////
//{ Программный интерфейс

Функция СоздатьФайлРеализацииШагов(ФайлФичи) Экспорт
	Лог.Отладка("Подготовка к генерации шагов спецификации "+ФайлФичи.ПолноеИмя);
	Ожидаем.Что(ФайлФичи, "Ожидали, что файл фичи будет передан как файл, а это не так").ИмеетТип("Файл");

	Лог.Отладка("Читаю фичу");

	РезультатыРазбора = ЧитательГеркин.ПрочитатьФайлСценария(ФайлФичи);

	НаборАдресовШагов = Новый Структура;

	ФайлШагов = ПолучитьФайлШагов(ФайлФичи);

	Если Не ФайлШагов.Существует() Тогда
		ПодготовитьКаталогФайловШагов(ФайлФичи, ФайлШагов);
	КонецЕсли;

	ЗаполнитьФайлШагов(ФайлФичи, РезультатыРазбора, ФайлШагов, НаборАдресовШагов);

	Возврат ФайлШагов;
КонецФункции

Функция ИмяЛога() Экспорт
	Возврат "oscript.app.bdd-generate";
КонецФункции

//}

////////////////////////////////////////////////////////////////////
//{ Реализация

Процедура ПодготовитьКаталогФайловШагов(ФайлФичи, ФайлШагов)
	КаталогШагов = Новый Файл(ФайлШагов.Путь);
	//КаталогШагов = Новый Файл(ОбъединитьПути(ФайлФичи.Путь, "step_definitions"));
	Если Не КаталогШагов.Существует() Тогда
		Лог.Отладка("Каталог шагов не существует. Создаю новый. "+КаталогШагов.ПолноеИмя);
		СоздатьКаталог(КаталогШагов.ПолноеИмя);
	Иначе
		Лог.Отладка("Каталог шагов уже существует."+КаталогШагов.ПолноеИмя);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьФайлШагов(ФайлФичи, РезультатыРазбора, ФайлШагов, НаборАдресовШагов)
	ЭтоПервичнаяГенерация = Не ФайлШагов.Существует();

	Если ЭтоПервичнаяГенерация Тогда
		Лог.Информация("Начинаю генерацию шагов для спецификации "+ФайлФичи.ПолноеИмя);
	Иначе
		Лог.Информация("Выполняю перегенерацию шагов для спецификации "+ФайлФичи.ПолноеИмя);
	КонецЕсли;

	ДеревоФич = РезультатыРазбора.ДеревоФич;
		Ожидаем.Что(ДеревоФич, "Ожидали, что дерево фич будет передано как дерево значений, а это не так").ИмеетТип("ДеревоЗначений");

	//ТекстФайлаШагов = "";
	ЧитательФайлаШагов = Новый ТекстовыйДокумент;
	Если Не ЭтоПервичнаяГенерация Тогда
		ЧитательФайлаШагов.Прочитать(ФайлШагов.ПолноеИмя);
		//ТекстФайлаШагов = ТекстШагов.ПолучитьТекст();
	КонецЕсли;

	ОписаниеЗаписываемогоФайла = Новый Структура;
	ОписаниеЗаписываемогоФайла.Вставить("ФайлШагов", ФайлШагов);
	ОписаниеЗаписываемогоФайла.Вставить("ЭтоПервичнаяГенерация", ЭтоПервичнаяГенерация);
	//ОписаниеЗаписываемогоФайла.Вставить("ТекстФайлаШагов", ТекстФайлаШагов);
	ОписаниеЗаписываемогоФайла.Вставить("ЧитательФайлаШагов", ЧитательФайлаШагов);

	НовыйФайл = Новый Файл(ВременныеФайлы.СоздатьФайл("os"));

	ЗаписьФайла = Новый ЗаписьТекста(НовыйФайл.ПолноеИмя, "utf-8");
	ОписаниеЗаписываемогоФайла.Вставить("ЗаписьФайла", ЗаписьФайла);
	Попытка
		Если ЭтоПервичнаяГенерация Тогда
			ЗаписатьПеременныеВТелоФайлаШагов(ЗаписьФайла);
		КонецЕсли;
		ЗаписатьОписанияШаговВФайлШагов(ОписаниеЗаписываемогоФайла, ДеревоФич.Строки[0], НаборАдресовШагов);

		РекурсивноЗаписатьШагиВФайл(ОписаниеЗаписываемогоФайла, ДеревоФич.Строки[0], НаборАдресовШагов);

		ЗаписьФайла.Закрыть();

		КопироватьФайл(НовыйФайл.ПолноеИмя, ФайлШагов.ПолноеИмя);
	Исключение
		ОсвободитьОбъект(ЗаписьФайла);
		ВызватьИсключение;
	КонецПопытки;
	Лог.Информация("Генерация завершена.");
КонецПроцедуры

Процедура ЗаписатьПеременныеВТелоФайлаШагов(ЗаписьФайла)
	ЗаписьФайла.ЗаписатьСтроку("Перем БДД;");
	ЗаписьФайла.ЗаписатьСтроку("");
КонецПроцедуры

Процедура ЗаписатьОписанияШаговВФайлШагов(ОписаниеЗаписываемогоФайла, Узел, НаборАдресовШагов)
	ЗаписьФайла = ОписаниеЗаписываемогоФайла.ЗаписьФайла;
	ЭтоПервичнаяГенерация = ОписаниеЗаписываемогоФайла.ЭтоПервичнаяГенерация;
	ЧитательФайлаШагов = ОписаниеЗаписываемогоФайла.ЧитательФайлаШагов;
	//ТекстФайлаШагов = ОписаниеЗаписываемогоФайла.ТекстФайлаШагов;

	Если Не ЭтоПервичнаяГенерация Тогда
		Регулярка_ПолучитьСписокШагов = Новый РегулярноеВыражение("^\s*Функция\s+ПолучитьСписокШагов\s*\(.+Экспорт");
	КонецЕсли;

	ЗаписьФайла.ЗаписатьСтроку("Функция ПолучитьСписокШагов(КонтекстФреймворкаBDD) Экспорт");
	ЗаписьФайла.ЗаписатьСтроку(Символы.Таб + "БДД = КонтекстФреймворкаBDD;");
	ЗаписьФайла.ЗаписатьСтроку("");
	ЗаписьФайла.ЗаписатьСтроку(Символы.Таб + "ВсеШаги = Новый Массив;");
	ЗаписьФайла.ЗаписатьСтроку("");

	НаборУжеДобавленныхШагов = Новый Структура;
	РекурсивноЗаписатьОпределенияШаговДляПолученияСпискаТестов(ЗаписьФайла, Узел, НаборАдресовШагов, НаборУжеДобавленныхШагов);

	ЗаписьФайла.ЗаписатьСтроку("");
	ЗаписьФайла.ЗаписатьСтроку(Символы.Таб + "Возврат ВсеШаги;");
	ЗаписьФайла.ЗаписатьСтроку("КонецФункции");
	ЗаписьФайла.ЗаписатьСтроку("");
КонецПроцедуры

Процедура РекурсивноЗаписатьОпределенияШаговДляПолученияСпискаТестов(ЗаписьФайла, Узел, НаборАдресовШагов, НаборУжеДобавленныхШагов)
	Лог.Отладка("Обхожу узел "+Узел.ТипШага+": "+Узел.Лексема+" <"+Узел.Тело+">");

	Если Узел.ТипШага = ВозможныеТипыШагов.Шаг Тогда
		Если Не НаборАдресовШагов.Свойство(Узел.АдресШага) И Не НаборУжеДобавленныхШагов.Свойство(Узел.АдресШага) Тогда
			ЗаписьФайла.ЗаписатьСтроку(Символы.Таб + "ВсеШаги.Добавить("""+Узел.АдресШага+""");");
			Лог.Отладка("В НаборУжеДобавленныхШагов добавляю шаг "+Узел.АдресШага);
			НаборУжеДобавленныхШагов.Вставить(Узел.АдресШага);
		КонецЕсли;
	КонецЕсли;

	Для Каждого СтрокаДерева Из Узел.Строки Цикл
		РекурсивноЗаписатьОпределенияШаговДляПолученияСпискаТестов(ЗаписьФайла, СтрокаДерева, НаборАдресовШагов, НаборУжеДобавленныхШагов);
	КонецЦикла;

КонецПроцедуры

Процедура РекурсивноЗаписатьШагиВФайл(ОписаниеЗаписываемогоФайла, Узел, НаборАдресовШагов)
	Лог.Отладка("Обхожу узел "+Узел.ТипШага+": "+Узел.Лексема+" <"+Узел.Тело+">");

	Если Узел.ТипШага = ВозможныеТипыШагов.Шаг Тогда
		Если НаборАдресовШагов.Свойство(Узел.АдресШага) Тогда
			Лог.Отладка("Шаг уже определен. Пропускаю. Шаг <"+Узел.АдресШага+">");
		Иначе
			ЗаписатьШаг(ОписаниеЗаписываемогоФайла, Узел);
			НаборАдресовШагов.Вставить(Узел.АдресШага, ОписаниеЗаписываемогоФайла.ФайлШагов.ПолноеИмя);
		КонецЕсли;
	КонецЕсли;

	Для Каждого СтрокаДерева Из Узел.Строки Цикл
		РекурсивноЗаписатьШагиВФайл(ОписаниеЗаписываемогоФайла, СтрокаДерева, НаборАдресовШагов);
	КонецЦикла;

КонецПроцедуры

Процедура ЗаписатьШаг(ОписаниеЗаписываемогоФайла, Узел)
	Лог.Отладка("Записываю шаг <"+Узел.АдресШага+">");

	ЗаписьФайла = ОписаниеЗаписываемогоФайла.ЗаписьФайла;

	СтрокаПараметров = ПолучитьСтрокуПараметров(Узел.Параметры);

	СтрокаДляЗаписи = СтрШаблон("//%1", Узел.Тело);
	Лог.Отладка("СтрокаДляЗаписи <"+СтрокаДляЗаписи+">");
	ЗаписьФайла.ЗаписатьСтроку(СтрокаДляЗаписи);
	СтрокаДляЗаписи = СтрШаблон("//##%1", Узел.АдресШага);
	Лог.Отладка("СтрокаДляЗаписи <"+СтрокаДляЗаписи+">");
	ЗаписьФайла.ЗаписатьСтроку(СтрокаДляЗаписи);

	ШаблонЗаписи = "%1 %2(%3) %4";
	СтрокаДляЗаписи = СтрШаблон(ШаблонЗаписи, "Процедура",  Узел.АдресШага, СтрокаПараметров, "Экспорт");
	Лог.Отладка("СтрокаДляЗаписи <"+СтрокаДляЗаписи+">");
	ЗаписьФайла.ЗаписатьСтроку(СтрокаДляЗаписи);

	ШаблонЗаписи = "%1 ВызватьИсключение ""%2"";";
	СтрокаДляЗаписи = СтрШаблон(ШаблонЗаписи, Символы.Таб, ЧитательГеркин.ТекстИсключенияДляЕщеНеРеализованногоШага());
	Лог.Отладка("СтрокаДляЗаписи <"+СтрокаДляЗаписи+">");
	ЗаписьФайла.ЗаписатьСтроку(СтрокаДляЗаписи);

	СтрокаДляЗаписи = "КонецПроцедуры";
	Лог.Отладка("СтрокаДляЗаписи <"+СтрокаДляЗаписи+">"+Символы.ПС);
	ЗаписьФайла.ЗаписатьСтроку(СтрокаДляЗаписи);
	ЗаписьФайла.ЗаписатьСтроку("");

КонецПроцедуры

Функция ПолучитьСтрокуПараметров(Знач Параметры)
	СтрокаПараметров = "";
	Если ЗначениеЗаполнено(Параметры) Тогда
		Номер = 1;
		Для Каждого ОписаниеПараметра Из Параметры Цикл
			Лог.Отладка("ОписаниеПараметра.Тип " + ОписаниеПараметра.Тип);
			ПредставлениеПараметра = ПолучитьПредставлениеПараметра(ОписаниеПараметра, Номер);
			СтрокаПараметров = СтрокаПараметров + ПредставлениеПараметра + ",";
			Номер = Номер + 1;
		КонецЦикла;
		СтрокаПараметров = Лев(СтрокаПараметров, СтрДлина(СтрокаПараметров)-1);
 	КонецЕсли;
	Возврат СтрокаПараметров;
КонецФункции // ПолучитьСтрокуПараметров()

Функция ПолучитьПредставлениеПараметра(ОписаниеПараметра, Номер)
	ПредставлениеПараметра = ПредставленияТиповПараметров[ОписаниеПараметра.Тип] + Номер;
	Возврат ПредставлениеПараметра;
КонецФункции // ПолучитьПредставлениеПараметра(ОписаниеПараметра, Номер)

Функция ПолучитьФайлШагов(ФайлФичи)
	Возврат Новый Файл(ОбъединитьПути(ФайлФичи.Путь, "step_definitions", ФайлФичи.ИмяБезРасширения+ ".os"));
КонецФункции // ПолучитьФайлШагов()
//}

Функция Инициализация()
	Лог = Логирование.ПолучитьЛог(ИмяЛога());

	ЧитательГеркин = ЗагрузитьСценарий(ОбъединитьПути(ТекущийСценарий().Каталог, "gherkin-read.os"));

	ВозможныеТипыШагов = ЧитательГеркин.ВозможныеТипыШагов();
	ВозможныеКлючиПараметров = ЧитательГеркин.ВозможныеКлючиПараметров();
	ПредставленияТиповПараметров = ВозможныеПредставленияТиповПараметров();
КонецФункции

Функция ВозможныеПредставленияТиповПараметров()
	Рез = Новый Соответствие;
	Рез.Вставить(ВозможныеКлючиПараметров.Строка, "ПарамСтрока");
	Рез.Вставить(ВозможныеКлючиПараметров.Число, "ПарамЧисло");
	Рез.Вставить(ВозможныеКлючиПараметров.Дата, "ПарамДата");
	Возврат Рез;
КонецФункции // ВозможныеПредставленияТиповПараметров()
// }

///////////////////////////////////////////////////////////////////
// Точка входа

Инициализация();
