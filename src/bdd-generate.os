////////////////////////////////////////////////////////////////////
//
// Объект-помощник для генерации файла шагов для Gherkin-спецификаций
//
//////////////////////////////////////////////////////////////////

#Использовать logos
#Использовать asserts
// #Использовать strings

Перем Лог;
Перем ЧитательГеркин;

Перем ВозможныеТипыШагов;
Перем ВозможныеКлючиПараметров;

////////////////////////////////////////////////////////////////////
//{ Программный интерфейс

Функция СоздатьФайлРеализацииШагов(ФайлФичи) Экспорт
	Лог.Отладка("Подготовка к генерации шагов спецификации "+ФайлФичи.ПолноеИмя);
	Ожидаем.Что(ФайлФичи, "Ожидали, что файл фичи будет передан как файл, а это не так").ИмеетТип("Файл");

	Лог.Отладка("Читаю фичу");

	РезультатыРазбора = ЧитательГеркин.ПрочитатьФайлСценария(ФайлФичи);

	ФайлШагов = СоздатьПустойФайлШагов(ФайлФичи);
	ФайлШагов = ЗаполнитьФайлШагов(ФайлФичи, РезультатыРазбора, ФайлШагов);

	Возврат ФайлШагов;
КонецФункции

//}

////////////////////////////////////////////////////////////////////
//{ Реализация

Функция СоздатьПустойФайлШагов(ФайлФичи)
	КаталогШагов = Новый Файл(ОбъединитьПути(ФайлФичи.Путь, "step_definitions"));
	Если Не КаталогШагов.Существует() Тогда
		Лог.Отладка("Каталог шагов не существует. Создаю новый. "+КаталогШагов.ПолноеИмя);
		СоздатьКаталог(КаталогШагов.ПолноеИмя);
	Иначе
		Лог.Отладка("Каталог шагов уже существует."+КаталогШагов.ПолноеИмя);
	КонецЕсли;

	ФайлШагов = Новый Файл(ОбъединитьПути(КаталогШагов.ПолноеИмя, ФайлФичи.ИмяБезРасширения+ ".os"));
	Если Не ФайлШагов.Существует() Тогда
		Лог.Отладка("Файл шагов не существует. Создаю новый. "+ФайлШагов.ПолноеИмя);
	Иначе
		Лог.Отладка("Файл шагов уже существует. Перезаполняю."+ФайлШагов.ПолноеИмя);
	КонецЕсли;

	Возврат ФайлШагов;
КонецФункции

Функция ЗаполнитьФайлШагов(ФайлФичи, РезультатыРазбора, ФайлШагов)
	Лог.Информация("Начинаю генерацию шагов для спецификации "+ФайлФичи.ПолноеИмя);

	ДеревоФич = РезультатыРазбора.ДеревоФич;
	Ожидаем.Что(ДеревоФич, "Ожидали, что дерево фич будет передано как дерево значений, а это не так").ИмеетТип("ДеревоЗначений");

	ЗаписьФайла = Новый ЗаписьТекста(ФайлШагов.ПолноеИмя, "utf-8");
	Попытка
		ЗаписатьБазовоеТелоШага(ЗаписьФайла, ДеревоФич.Строки[0]);

		РекурсивноЗаписатьШагиВФайл(ЗаписьФайла, ДеревоФич.Строки[0]);

		ЗаписьФайла.Закрыть();
	Исключение
		ОсвободитьОбъект(ЗаписьФайла);
		ВызватьИсключение;
	КонецПопытки;
	Лог.Информация("Генерация завершена.");

	Возврат ФайлШагов;
КонецФункции

Процедура ЗаписатьБазовоеТелоШага(ЗаписьФайла, Узел)
	ЗаписьФайла.ЗаписатьСтроку("Перем БДД;");
	ЗаписьФайла.ЗаписатьСтроку("");
	ЗаписьФайла.ЗаписатьСтроку("Функция ПолучитьСписокШагов(КонтекстФреймворкаBDD) Экспорт");
	ЗаписьФайла.ЗаписатьСтроку(Символы.Таб + "БДД = КонтекстФреймворкаBDD;");
	ЗаписьФайла.ЗаписатьСтроку("");
	ЗаписьФайла.ЗаписатьСтроку(Символы.Таб + "ВсеТесты = Новый Массив;");
	ЗаписьФайла.ЗаписатьСтроку("");

	РекурсивноЗаписатьОпределенияШаговДляПолученияСпискаТестов(ЗаписьФайла, Узел);

	ЗаписьФайла.ЗаписатьСтроку("");
	ЗаписьФайла.ЗаписатьСтроку(Символы.Таб + "Возврат ВсеТесты;");
	ЗаписьФайла.ЗаписатьСтроку("КонецФункции");
	ЗаписьФайла.ЗаписатьСтроку("");
КонецПроцедуры

Процедура РекурсивноЗаписатьОпределенияШаговДляПолученияСпискаТестов(ЗаписьФайла, Узел)
	Лог.Отладка("Обхожу узел "+Узел.ТипШага+": "+Узел.Лексема+" <"+Узел.Тело+">");

	Если Узел.ТипШага = ВозможныеТипыШагов.Шаг Тогда
		ЗаписьФайла.ЗаписатьСтроку(Символы.Таб + "ВсеТесты.Добавить("""+Узел.АдресШага+""");");
	КонецЕсли;

	Для Каждого СтрокаДерева Из Узел.Строки Цикл
		РекурсивноЗаписатьОпределенияШаговДляПолученияСпискаТестов(ЗаписьФайла, СтрокаДерева);
	КонецЦикла;

КонецПроцедуры

Процедура РекурсивноЗаписатьШагиВФайл(ЗаписьФайла, Узел)
	Лог.Отладка("Обхожу узел "+Узел.ТипШага+": "+Узел.Лексема+" <"+Узел.Тело+">");

	Если Узел.ТипШага = ВозможныеТипыШагов.Шаг Тогда
		ЗаписатьШаг(ЗаписьФайла, Узел);
	КонецЕсли;

	Для Каждого СтрокаДерева Из Узел.Строки Цикл
		РекурсивноЗаписатьШагиВФайл(ЗаписьФайла, СтрокаДерева);
	КонецЦикла;

КонецПроцедуры

Процедура ЗаписатьШаг(ЗаписьФайла, Узел)

	СтрокаПараметров = "";
	Если ЗначениеЗаполнено(Узел.Параметры) Тогда
		Для Каждого КлючЗначение Из Узел.Параметры Цикл
			СтрокаПараметров = СтрокаПараметров + КлючЗначение.Значение + ",";
		КонецЦикла;
		СтрокаПараметров = Лев(СтрокаПараметров, СтрДлина(СтрокаПараметров)-1);
	КонецЕсли;

	СтрокаДляЗаписи = СтрШаблон("//%1", Узел.Тело);
	Лог.Отладка("СтрокаДляЗаписи <"+СтрокаДляЗаписи+">");
	ЗаписьФайла.ЗаписатьСтроку(СтрокаДляЗаписи);
	СтрокаДляЗаписи = СтрШаблон("//##%1", Узел.АдресШага);
	Лог.Отладка("СтрокаДляЗаписи <"+СтрокаДляЗаписи+">");
	ЗаписьФайла.ЗаписатьСтроку(СтрокаДляЗаписи);

	ШаблонЗаписи = "%1 %2(%3) %4";
	СтрокаДляЗаписи = СтрШаблон(ШаблонЗаписи, "Процедура",  Узел.АдресШага, СтрокаПараметров, "Экспорт");
	Лог.Отладка("СтрокаДляЗаписи <"+СтрокаДляЗаписи+">");
	ЗаписьФайла.ЗаписатьСтроку(СтрокаДляЗаписи);

	ШаблонЗаписи = "%1 ВызватьИсключение ""%2"";";
	СтрокаДляЗаписи = СтрШаблон(ШаблонЗаписи, Символы.Таб, ЧитательГеркин.ТекстИсключенияДляЕщеНеРеализованногоШага());
	Лог.Отладка("СтрокаДляЗаписи <"+СтрокаДляЗаписи+">");
	ЗаписьФайла.ЗаписатьСтроку(СтрокаДляЗаписи);

	СтрокаДляЗаписи = "КонецПроцедуры";
	Лог.Отладка("СтрокаДляЗаписи <"+СтрокаДляЗаписи+">"+Символы.ПС);
	ЗаписьФайла.ЗаписатьСтроку(СтрокаДляЗаписи);
	ЗаписьФайла.ЗаписатьСтроку("");

КонецПроцедуры

Функция ИмяЛога() Экспорт
	Возврат "oscript.app.bdd-generate";
КонецФункции

//}

Функция Инициализация()
	Лог = Логирование.ПолучитьЛог(ИмяЛога());

	ЧитательГеркин = ЗагрузитьСценарий(ОбъединитьПути(ТекущийСценарий().Каталог, "gherkin-read.os"));

	ВозможныеТипыШагов = ЧитательГеркин.ВозможныеТипыШагов();
	ВозможныеКлючиПараметров = ЧитательГеркин.ВозможныеКлючиПараметров();

КонецФункции

// }

///////////////////////////////////////////////////////////////////
// Точка входа

Инициализация();
