
#Использовать logos
#Использовать asserts

Перем юТест;
Перем Лог;

Перем ВозможныеСтатусыВыполнения;
Перем ВозможныеТипыШагов;

////////////////////////////////////////////////////////////////////
//{ Программный интерфейс

Функция ВыполнитьФичу(ФайлСценария) Экспорт
	Лог.Отладка("Подготовка к выполнению сценария "+ФайлСценария.ПолноеИмя);
	
	ПодключитьСценарий(ОбъединитьПути(ТекущийСценарий().Каталог, "gherkin-read.os"), "ЧитательGherkin");
	ЧитательГеркин = Новый ЧитательGherkin;
	ВозможныеТипыШагов = ЧитательГеркин.ВозможныеТипыШагов();

	Лог.Отладка("Читаю фичу ");
	
	РезультатыРазбора = ЧитательГеркин.ПрочитатьФайлСценария(ФайлСценария);
	
	РезультатыВыполнения = ВыполнитьДеревоФич(ФайлСценария, РезультатыРазбора);
	
	Возврат РезультатыВыполнения;
КонецФункции

//}

// Статусы выполнения тестов - ВАЖЕН порядок заполнения, используется в ЗапомнитьСамоеХудшееСостояние
Функция ВозможныеСтатусыВыполнения() Экспорт
	Рез = Новый Структура;
	Рез.Вставить("НеВыполнялся", "0 Не выполнялся");
	Рез.Вставить("Пройден", "1 пройден");
	Рез.Вставить("НеРеализован", "2 не реализован");
	Рез.Вставить("Сломался", "3 сломался");
	Возврат Рез;
КонецФункции

Функция ИмяЛога() Экспорт
	Возврат "oscript.app.bdd-exec";
КонецФункции

//}

////////////////////////////////////////////////////////////////////
//{ Реализация

Функция ВыполнитьДеревоФич(ФайлСценария, РезультатыРазбора)
	Лог.Отладка("Начинаю выполнять фичу ");

	ДеревоФич = РезультатыРазбора.ДеревоФич;
	Ожидаем.Что(ДеревоФич, "Ожидали, что дерево фич будет передано как дерево значений, а это не так").ИмеетТип("ДеревоЗначений");
	
	РезультатыВыполнения = ДеревоФич.Скопировать();
	РезультатыВыполнения.Колонки.Добавить("СтатусВыполнения");
	
	ИсполнительШагов = НайтиИсполнителяШагов(ФайлСценария);

	Рефлектор = Новый Рефлектор;
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(ЭтотОбъект);
	МассивОписанийШагов = Рефлектор.ВызватьМетод(ИсполнительШагов, "ПолучитьСписокШагов", МассивПараметров);

	СтатусВыполнения = РекурсивноВыполнитьШаги(ИсполнительШагов, РезультатыВыполнения.Строки[0]);
	
	Возврат РезультатыВыполнения;
КонецФункции

Функция НайтиИсполнителяШагов(ФайлСценария)
	Лог.Отладка("Ищу исполнителя шагов в каталоге "+ФайлСценария.Путь);
	ПутьКИсполнителю = ОбъединитьПути(ФайлСценария.Путь, "step_definitions");
	ПутьКИсполнителю = ОбъединитьПути(ПутьКИсполнителю, ФайлСценария.ИмяБезРасширения+ ".os");
	
	ФайлИсполнителя = Новый Файл(ПутьКИсполнителю);
	Лог.Отладка("Ищу исполнителя шагов в файле "+ФайлИсполнителя.Имя);
	
	Если Не ФайлИсполнителя.Существует() Тогда
		ВызватьИсключение "Файл исполнителя шагов не найден."+ФайлИсполнителя.ПолноеИмя;
	КонецЕсли;
	ИсполнительШагов = ЗагрузитьСценарий(ФайлИсполнителя.ПолноеИмя);
	Возврат ИсполнительШагов;
КонецФункции

Функция РекурсивноВыполнитьШаги(ИсполнительШагов, Узел)
	Лог.Отладка("Выполняю узел <"+Узел.ТипШага+">, тело <"+Узел.Тело+">");
	СтатусВыполнения = ВозможныеСтатусыВыполнения.НеВыполнялся;
	
	СтатусВыполнения = ВыполнитьШаг(ИсполнительШагов, Узел);
	
	Для Каждого СтрокаДерева Из Узел.Строки Цикл
		НовыйСтатус = РекурсивноВыполнитьШаги(ИсполнительШагов, СтрокаДерева);
		СтатусВыполнения = ЗапомнитьСамоеХудшееСостояние(СтатусВыполнения, НовыйСтатус);
	КонецЦикла;
	Узел.СтатусВыполнения = СтатусВыполнения;
	Возврат СтатусВыполнения;
КонецФункции

Функция ВыполнитьШаг(ИсполнительШагов, Узел)
	СтатусВыполнения = ВозможныеСтатусыВыполнения.НеВыполнялся;
	Если Узел.ТипШага = ВозможныеТипыШагов.Шаг Тогда
		Рефлектор = Новый Рефлектор;
		
		Попытка
			Рефлектор.ВызватьМетод(ИсполнительШагов, Узел.АдресШага);
			СтатусВыполнения = ВозможныеСтатусыВыполнения.Пройден;
		Исключение
			
			СтатусВыполнения = ВозможныеСтатусыВыполнения.Сломался;
			текстОшибки = ОписаниеОшибки();
			 // Если ЕстьОшибка_МетодОбъектаНеОбнаружен(текстОшибки, ИмяТестовогоСлучая) Тогда
				// Сообщение = НСтр("ru = 'Отсутствует реализация тестового метода (%1).'");
				// ПропуститьТест(СтрЗаменить(Сообщение, "%1", ИcполняемыйКод));
			// Иначе
				// ВызватьИсключение;
			// КонецЕсли;
			
		КонецПопытки;
	КонецЕсли;
	Узел.СтатусВыполнения = СтатусВыполнения;
	Возврат СтатусВыполнения;
КонецФункции

// Функция ЕстьОшибка_МетодОбъектаНеОбнаружен(текстОшибки, имяМетода)
	// Результат = Ложь;
	// Если Найти(текстОшибки, "Метод объекта не обнаружен ("+имяМетода+")") > 0 
		// ИЛИ Найти(текстОшибки, "Object method not found ("+имяМетода+")") > 0  Тогда
		// Результат = Истина;
	// КонецЕсли;
	
	// Возврат Результат;
// КонецФункции

// Устанавливает новое текущее состояние выполнения тестов
// в соответствии с приоритетами состояний:
// 		Красное - заменяет все другие состояния
// 		Желтое - заменяет только зеленое состояние
// 		Зеленое - заменяет только серое состояние (тест не выполнялся ни разу).
Функция ЗапомнитьСамоеХудшееСостояние(ТекущееСостояние, НовоеСостояние)
	ТекущееСостояние = Макс(ТекущееСостояние, НовоеСостояние);
	Возврат ТекущееСостояние;
	
КонецФункции

Функция Инициализация() 
	Лог = Логирование.ПолучитьЛог(ИмяЛога());

	ВозможныеСтатусыВыполнения = ВозможныеСтатусыВыполнения();
КонецФункции

// }

///////////////////////////////////////////////////////////////////
// Точка входа

Инициализация();
