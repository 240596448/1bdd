
#Использовать logos
#Использовать asserts

Перем юТест;
Перем Лог;

Перем СоответствиеЯзыкКлючевыеСлова;
Перем СоответствиеКлючевыеСлова;

Перем ВозможныеТипыНачалаСтроки;
Перем ВозможныеКлючевыеСлова;
Перем УровниЛексем;

////////////////////////////////////////////////////////////////////
//{ Программный интерфейс

Функция ПрочитатьФайлСценария(ФайлСценария) Экспорт
	Лог.Отладка("Читаю сценарий "+ФайлСценария.ПолноеИмя);
	Фича = Новый ЧтениеТекста(ФайлСценария.ПолноеИмя, "UTF-8");
	
	СтруктураФичи = РазобратьТекстФичи(Фича);
	НайденныеЛексемы = СтруктураФичи.НайденныеЛексемы;

	Фича.Закрыть();

	Возврат СтруктураФичи;
КонецФункции

Функция ВозможныеКлючевыеСлова() Экспорт
	Рез = Новый Структура;
	Рез.Вставить("Допустим", "given");
	Рез.Вставить("Когда", "when");
	Рез.Вставить("Тогда", "then");
	Рез.Вставить("Также", "and");
	Рез.Вставить("Но", "but");
	Рез.Вставить("Функциональность", "feature");
	Рез.Вставить("Контекст", "background");
	Рез.Вставить("Сценарий", "scenario");
	Рез.Вставить("структураСценария", "scenario_outline");
	Рез.Вставить("Примеры", "examples");
	Возврат Рез;
КонецФункции

//}

////////////////////////////////////////////////////////////////////
//{ Реализация

Функция РазобратьТекстФичи(Знач Фича)
		
	НайденныеЛексемы = Новый Массив;
	ПредыдущиеПараметрыЛексемы = Неопределено;
	
	Пока Истина Цикл
		ОчереднаяСтрока = ПолучитьОчереднуюСтрокуСценария(Фича);
		Если ОчереднаяСтрока = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		ПервыйСимвол = Лев(ОчереднаяСтрока, 1);
		Если ПервыйСимвол = ВозможныеТипыНачалаСтроки.Комментарий Тогда
			Лог.Отладка("	Первый символ строки - это комментарий.");
			НовыйЯзык = ПолучитьЯзыкФичи(ОчереднаяСтрока);
			Если ЗначениеЗаполнено(НовыйЯзык) Тогда
				Язык = НовыйЯзык;
				СоответствиеКлючевыеСлова = СоответствиеЯзыкКлючевыеСлова.Получить(Язык);
				Лог.Отладка("	Получили язык фичи "+Язык);
			Иначе
				Лог.Отладка("		Пропускаю строку");
			КонецЕсли;
			Продолжить;
			
		ИначеЕсли ПервыйСимвол = ВозможныеТипыНачалаСтроки.Метка Тогда
			Лог.Отладка("	Первый символ строки - это метка. Пропускаю строку");
			Продолжить;
			
		ИначеЕсли ПервыйСимвол = ВозможныеТипыНачалаСтроки.Пример Тогда
			ВызватьИсключение "Обработка примеров пока не реализована";
		КонецЕсли;

		Ожидаем.Что(Язык, "Ожидали, что найдем язык будет найден "+Язык+", но не нашли").Заполнено();
		
		ПараметрыЛексемы = НайтиЛексему(ОчереднаяСтрока);
		Если ЗначениеЗаполнено(ПараметрыЛексемы) Тогда
			ПредыдущиеПараметрыЛексемы = ПараметрыЛексемы;
			НайденныеЛексемы.Добавить(ПараметрыЛексемы);
		Иначе
			ПредыдущиеПараметрыЛексемы.ПраваяЧасть = ПредыдущиеПараметрыЛексемы.ПраваяЧасть + Символы.ПС + ОчереднаяСтрока;
		КонецЕсли;
	КонецЦикла;
	
	Лог.Отладка("Нашли лексем "+НайденныеЛексемы.Количество());
	Ожидаем.Что(НайденныеЛексемы.Количество(), "Ожидали, что заданы функциональность и хотя бы один сценарий, а их нет").БольшеИлиРавно(2);

	ДеревоФич = ПолучитьДеревоФич(НайденныеЛексемы);
	Ожидаем.Что(ДеревоФич.Строки.Количество(), "Ожидали, что заданы функциональность, а их не удалось найти в файле").Равно(1);
	
	РезультатыРазбора = Новый Структура;	
	РезультатыРазбора.Вставить("Язык", Язык);
	РезультатыРазбора.Вставить("НайденныеЛексемы", НайденныеЛексемы);
	РезультатыРазбора.Вставить("ДеревоФич", ДеревоФич.Строки[0]);
	Возврат РезультатыРазбора;
КонецФункции

Функция НайтиЛексему(Знач Строка)
	Ожидаем.Что(СоответствиеКлючевыеСлова, "Ожидали, что найдем ключевые слова, но не нашли").Заполнено();
	
	СтрокаДляПоиска = НРег(Строка);
	Для каждого КлючЗначение Из СоответствиеКлючевыеСлова Цикл
		Лексема = КлючЗначение.Ключ;
		Позиция = Найти(СтрокаДляПоиска, Лексема);
		Если Позиция = 1 Тогда
			Рез = Новый Структура;
			Рез.Вставить("Лексема", КлючЗначение.Значение);
			
			ПраваяЧасть = СокрЛП(Сред(Строка, СтрДлина(Лексема)+1));
			Символ = Лев(ПраваяЧасть, 1);
			Если (Символ=" ") или (Символ=":") или (Символ=",") Тогда
				ПраваяЧасть = СокрЛП(Сред(ПраваяЧасть, 2));
			КонецЕсли;
			
			Рез.Вставить("ПраваяЧасть", ПраваяЧасть);
			лог.Отладка("Нашел лексему <"+Рез.Лексема+">, правая часть <"+ПраваяЧасть+">");
			Возврат Рез;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

Функция ПолучитьОчереднуюСтрокуСценария(Знач Фича)
	Рез = "";
	Пока Истина Цикл
		ОчереднаяСтрока = Фича.ПрочитатьСтроку();
		Если ОчереднаяСтрока = Неопределено Тогда
			Лог.Отладка("Строки фичи закончились");
			Возврат Неопределено;
		КонецЕсли;	

		Рез = СокрЛП(ОчереднаяСтрока);
		Если Не ПустаяСтрока(Рез) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;	
	
	Лог.Отладка("Очередная строка фичи <"+Рез+">");
	Возврат Рез;
КонецФункции

Функция ПолучитьДеревоФич(НайденныеЛексемы)
	ДеревоФич = СоздатьДеревоФич();
	Индекс = 0;
	ОбработатьДеревоФич(НайденныеЛексемы, ДеревоФич.Строки, Индекс);
	
	Возврат ?(ЗначениеЗаполнено(ДеревоФич.Строки), ДеревоФич, Неопределено);
КонецФункции

Функция СоздатьДеревоФич()
	Рез = Новый ДеревоЗначений;
	Рез.Колонки.Добавить("Лексема");
	Рез.Колонки.Добавить("Тело");
	Рез.Колонки.Добавить("Параметры");
	Возврат Рез;
КонецФункции

Процедура ОбработатьДеревоФич(НайденныеЛексемы, СтрокиДерева, Индекс)
	Пока Индекс < НайденныеЛексемы.Количество() Цикл
		ПараметрыОчереднойЛексемы = НайденныеЛексемы[Индекс];
		ОчереднаяЛексема = ПараметрыОчереднойЛексемы.Лексема;
		УровеньЛексемы = УровниЛексем[ОчереднаяЛексема];
		Лог.Отладка("Получил Очередная лексема <"+ОчереднаяЛексема+">, Индекс "+Индекс+", уровень <"+УровеньЛексемы+">, тело <"+ПараметрыОчереднойЛексемы.ПраваяЧасть+">");

		ПараметрыИзСтроки = Новый Массив;
		НоваяПраваяЧасть = ИзвлечьПараметры(ПараметрыОчереднойЛексемы.ПраваяЧасть, ПараметрыИзСтроки);
		
		НоваяСтрока = ЗаполнитьУзелДереваФич(СтрокиДерева, ОчереднаяЛексема, НоваяПраваяЧасть);
		НоваяСтрока.Параметры = ПараметрыИзСтроки;
		
		СтараяСтрока = НоваяСтрока;
			
		Индекс = Индекс + 1;
		Если Индекс >= НайденныеЛексемы.Количество() Тогда
			Лог.Отладка("Завершаю изучать лексемы. Индекс "+Индекс);
			Прервать;
		КонецЕсли;
		
		НоваяЛексема = НайденныеЛексемы[Индекс].Лексема;
		НовыйУровеньЛексемы = УровниЛексем[НоваяЛексема];
		Лог.Отладка("Проверяю следующую лексему <"+НоваяЛексема+">, Индекс "+Индекс+", уровень <"+НовыйУровеньЛексемы+">");
		Если НовыйУровеньЛексемы > УровеньЛексемы Тогда // TODO здесь должны быть равнозначные узлы. Например, сценарий/примеры
			ОбработатьДеревоФич(НайденныеЛексемы, НоваяСтрока.Строки, Индекс);
		ИначеЕсли НовыйУровеньЛексемы = УровеньЛексемы Тогда
			Продолжить;
		Иначе
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаполнитьУзелДереваФич(СтрокиДерева, Лексема, Тело)
	НоваяСтрока = СтрокиДерева.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Новый Структура("Лексема,Тело,Строки,Параметры", Лексема, Тело, Новый Массив, Новый Массив)); 
	Возврат НоваяСтрока;
КонецФункции

Функция ИзвлечьПараметры(Знач Тело, ПараметрыИзСтроки) 
	НовоеТело = СтрЗаменить(Тело, """", "'");
	
	НовоеТело = ВыделитьСтроковыеПараметры(НовоеТело, ПараметрыИзСтроки);
	Возврат НовоеТело;
КонецФункции

Функция ВыделитьСтроковыеПараметры(Знач Тело, ПараметрыСтроки)
	Итератор = Найти(Тело,"'");
	Если Итератор = 0 Тогда
		Возврат Тело;
	КонецЕсли;	 

	ОстатокСтроки = Тело;
	НоваяСтрока = "";
	
	Пока Итератор > 0 Цикл
		НоваяСтрока = НоваяСтрока + Лев(ОстатокСтроки, Итератор-1);
		ОстатокСтроки = Сред(ОстатокСтроки, Итератор+1);
		
		Итератор = Найти(ОстатокСтроки,"'");
		Если Итератор > 0 Тогда
			ЗначениеПараметра = Лев(ОстатокСтроки, Итератор-1);
			ОстатокСтроки = Сред(ОстатокСтроки, Итератор+1);
			НоваяСтрока = НоваяСтрока + "<ПараметрСтрока>";
			ПараметрыСтроки.Добавить(ЗначениеПараметра);
		Иначе
			НоваяСтрока = НоваяСтрока + ОстатокСтроки;
		КонецЕсли;	 
		
		
		Итератор = Найти(ОстатокСтроки,"'");
		Если Итератор = 0 Тогда
			НоваяСтрока = НоваяСтрока + ОстатокСтроки;
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат НоваяСтрока;
КонецФункции

Функция ВозможныеТипыНачалаСтроки()
	Рез = Новый Структура;
	Рез.Вставить("Комментарий", "#");
	Рез.Вставить("Метка", "@");
	Рез.Вставить("Пример", "|");
	Рез.Вставить("ОбычныйТекст", 1);
	Возврат Рез;
КонецФункции

Функция ПолучитьЯзыкФичи(Знач ОчереднаяСтрока)
	Перем МЕТКА_ЯЗЫКА;
	
	МЕТКА_ЯЗЫКА = "language:";

	Язык = "";
	Поз = Найти(ОчереднаяСтрока, МЕТКА_ЯЗЫКА);
	Если  Поз > 0 Тогда
		Язык = СокрЛП(Сред(ОчереднаяСтрока, Поз+СтрДлина(МЕТКА_ЯЗЫКА)));
	КонецЕсли;
	Возврат Язык;
КонецФункции

Функция Инициализация() 
	Лог = Логирование.ПолучитьЛог("oscript.app.gherkin-read");
	// Лог.УстановитьУровень(УровниЛога.Отладка);
	
	Язык = "ru";
	
	СоответствиеЯзыкКлючевыеСлова = Создать_СоответствиеЯзыкКлючевыеСлова();
	СоответствиеКлючевыеСлова = СоответствиеЯзыкКлючевыеСлова.Получить(Язык);

	ВозможныеТипыНачалаСтроки = ВозможныеТипыНачалаСтроки();
	ВозможныеКлючевыеСлова = ВозможныеКлючевыеСлова();
	УровниЛексем = ВозможныеУровниЛексем();
КонецФункции

Функция Создать_СоответствиеЯзыкКлючевыеСлова()
	Рез = Новый Соответствие;
	Рез.Вставить("ru", СоздатьСоответствиеКлючевыхСлов_ru());
	Возврат Рез;
КонецФункции

Функция СоздатьСоответствиеКлючевыхСлов_ru()
	Рез = Новый Соответствие;
	
	Рез.Вставить("допустим","given");
	Рез.Вставить("дано","given");
	Рез.Вставить("пусть","given");
	
	Рез.Вставить("если","when");
	Рез.Вставить("когда","when");
	
	Рез.Вставить("тогда","then");
	Рез.Вставить("то","then");
	
	Рез.Вставить("и","and");
	Рез.Вставить("к тому же","and");
	Рез.Вставить("также","and");
	
	Рез.Вставить("но","but");
	Рез.Вставить("а","but");
	
	Рез.Вставить("функциональность","feature");
	Рез.Вставить("функционал","feature");
	Рез.Вставить("функция","feature");
	Рез.Вставить("свойство","feature");
	
	Рез.Вставить("предыстория","background");
	Рез.Вставить("контекст","background");	
	Рез.Вставить("сценарий","scenario");
	Рез.Вставить("структура сценария","scenario_outline");
	
	Рез.Вставить("примеры","examples");
	
	Возврат Рез;
КонецФункции

Функция ВозможныеУровниЛексем()
	Рез = Новый Структура;
	Рез.Вставить(ВозможныеКлючевыеСлова.Функциональность, 0);
	Рез.Вставить(ВозможныеКлючевыеСлова.Контекст, 5);
	Рез.Вставить(ВозможныеКлючевыеСлова.Примеры, 5);
	Рез.Вставить(ВозможныеКлючевыеСлова.Сценарий, 20);
	Рез.Вставить(ВозможныеКлючевыеСлова.СтруктураСценария, 20);
	Рез.Вставить(ВозможныеКлючевыеСлова.Допустим, 100);
	Рез.Вставить(ВозможныеКлючевыеСлова.Когда, 100);
	Рез.Вставить(ВозможныеКлючевыеСлова.Тогда, 100);
	Рез.Вставить(ВозможныеКлючевыеСлова.Также, 100);
	Рез.Вставить(ВозможныеКлючевыеСлова.Но, 100);
	Рез.Вставить(ВозможныеКлючевыеСлова.Когда, 100);
	Возврат Рез;
КонецФункции
// }

///////////////////////////////////////////////////////////////////
// Точка входа

Инициализация();
